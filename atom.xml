<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2017-10-20T13:35:57+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[accessibilityjs]]></title>
    <link href="http://nmotw.in/accessibilityjs/"/>
    <updated>2017-10-20T13:13:03+05:30</updated>
    <id>http://nmotw.in/accessibilityjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/accessibilityjs">accessibilityjs</a></h1>

<blockquote><p>Client side accessibility error scanner.</p></blockquote>

<p><code>accessibilityjs</code> with <code>0</code> dependenices does an wonderful job in scaning and reproting accessibility issues for a given page.</p>

<p>It currently can scan and report the bleow problems:</p>

<ul>
<li><code>ImageWithoutAltAttributeError</code></li>
<li><code>ElementWithoutLabelError</code></li>
<li><code>LinkWithoutLabelOrRoleError</code></li>
<li><code>LabelMissingControlError</code></li>
<li><code>InputMissingLabelError</code></li>
<li><code>ButtonWithoutLabelError</code></li>
<li><code>ARIAAttributeMissingError</code></li>
</ul>


<p><strong>Get it:</strong> <code>npm install accessibilityjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">scanForProblems</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;accessibilityjs&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">logError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">error</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;accessibility-error&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">error</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">\</span><span class="nx">n</span><span class="err">\</span><span class="nx">n$</span><span class="p">{</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span><span class="nx">once</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scanForProblems</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">logError</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/accessibilityjs/accessibilityjs.gif" alt="accessibilityjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[breakable]]></title>
    <link href="http://nmotw.in/breakable/"/>
    <updated>2017-10-12T17:39:52+05:30</updated>
    <id>http://nmotw.in/breakable</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/breakable">breakable</a></h1>

<blockquote><p>Break out of functions in a more composable way.</p></blockquote>

<p><code>breakable</code> is useful when you want to break out of a deep recursion, passing a value, without riddling your code with exception ceremony.</p>

<p><strong>Get it:</strong> <code>npm install breakable</code></p>

<p><strong>Sample usage:</strong></p>

<p>Instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">esprima</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;esprima&quot;</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">traverse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ast-traverse&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ast</span> <span class="o">=</span> <span class="nx">esprima</span><span class="p">(</span><span class="s2">&quot;f(!x, y)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">val</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">traverse</span><span class="p">(</span><span class="nx">ast</span><span class="p">,</span> <span class="p">{</span><span class="nx">pre</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;UnaryExpression&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">operator</span> <span class="o">===</span> <span class="s2">&quot;!&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">val</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">argument</span><span class="p">;</span>
</span><span class='line'>            <span class="k">throw</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}});</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">e</span><span class="p">;</span> <span class="c1">// re-throw if it wasn&#39;t our exception </span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span> <span class="c1">// { type: &#39;Identifier&#39;, name: &#39;x&#39; } </span>
</span></code></pre></td></tr></table></div></figure>


<p>You could:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">breakable</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;breakable&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">esprima</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;esprima&quot;</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">traverse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ast-traverse&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ast</span> <span class="o">=</span> <span class="nx">esprima</span><span class="p">(</span><span class="s2">&quot;f(!x, y)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">breakable</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">brk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">traverse</span><span class="p">(</span><span class="nx">ast</span><span class="p">,</span> <span class="p">{</span><span class="nx">pre</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;UnaryExpression&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">operator</span> <span class="o">===</span> <span class="s2">&quot;!&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">brk</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">argument</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span> <span class="c1">// { type: &#39;Identifier&#39;, name: &#39;x&#39; } </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/breakable/breakable.gif" alt="breakable" /></p>

<p>P.S: This is a trivial example, if you want to do something like that in the <code>gif</code> you might want <code>.some</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css-what]]></title>
    <link href="http://nmotw.in/css-what/"/>
    <updated>2017-10-08T16:30:16+05:30</updated>
    <id>http://nmotw.in/css-what</id>
    <content type="html"><![CDATA[<h1><a href="">css-what</a></h1>

<blockquote><p>CSS selector parser.</p></blockquote>

<p><code>css-what</code> <strike>a</strike> <em>THE</em> CSS selector parser! Zero dep module that helps you to parse complex <code>CSS</code> selectors.</p>

<p><strong>Get it:</strong> <code>npm install css-what</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">cssWhat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;css-what&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cssWhat</span><span class="p">(</span><span class="s1">&#39;foo[bar]:baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*~&gt; </span>
</span><span class='line'><span class="cm">[ [ { type: &#39;tag&#39;, name: &#39;foo&#39; },</span>
</span><span class='line'><span class="cm">    { type: &#39;attribute&#39;,</span>
</span><span class='line'><span class="cm">      name: &#39;bar&#39;,</span>
</span><span class='line'><span class="cm">      action: &#39;exists&#39;,</span>
</span><span class='line'><span class="cm">      value: &#39;&#39;,</span>
</span><span class='line'><span class="cm">      ignoreCase: false },</span>
</span><span class='line'><span class="cm">    { type: &#39;pseudo&#39;,</span>
</span><span class='line'><span class="cm">      name: &#39;baz&#39;,</span>
</span><span class='line'><span class="cm">      data: null } ] ]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function returns a two-dimensional array. The first dimension represents selectors separated by commas (eg. sub1, sub2), the second contains the relevant tokens for that selector.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/css-what/css-what.gif" alt="css-what.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unsplash-wallpaper]]></title>
    <link href="http://nmotw.in/unsplash-wallpaper/"/>
    <updated>2017-09-28T18:52:53+05:30</updated>
    <id>http://nmotw.in/unsplash-wallpaper</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/unsplash-wallpaper">unsplash-wallpaper</a></h1>

<blockquote><p>unsplash images as your wallpaper from CLI.</p></blockquote>

<p><code>unsplash-wallpaper</code> an inviting module that helps you set images from <a href="https://unsplash.com/">unsplash</a>
as your desktop wallpaper.</p>

<p><strong>Get it:</strong> <code>npm install -g unsplash-wallpaper</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>unsplash-wallpaper
</span><span class='line'>
</span><span class='line'>To learn the commands:
</span><span class='line'>  <span class="nv">$ </span>unsplash-wallpaper --help
</span><span class='line'>To save the image resolution:
</span><span class='line'>  <span class="nv">$ </span>unsplash-wallpaper --width 2880 --height 1800 -s
</span><span class='line'>To download and use a random image:
</span><span class='line'>  <span class="nv">$ </span>unsplash-wallpaper -r
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/unsplash-wallpaper/unsplash-wallpaper.gif" alt="unsplash-wallpaper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[comlinkjs]]></title>
    <link href="http://nmotw.in/comlinkjs/"/>
    <updated>2017-09-22T12:02:46+05:30</updated>
    <id>http://nmotw.in/comlinkjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/comlinkjs">comlinkjs</a></h1>

<blockquote><p>A tiny RPC library for windows, iframes, WebWorkers and ServiceWorkers.</p></blockquote>

<p><code>comlinkjs</code> has the below interface, makes use of <code>MessageChannel</code> helps you to work on objects from another JavaScript realm (like a Worker or an iframe) as if it was a local object. Just use await whenever the remote value is involed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">interface</span> <span class="nx">Endpoint</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">postMessage</span><span class="p">(</span><span class="nx">message</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">transfer</span><span class="o">?:</span> <span class="nx">any</span><span class="p">[])</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">listener</span><span class="o">:</span> <span class="nx">EventListenerOrEventListenerObject</span><span class="p">,</span> <span class="nx">options</span><span class="o">?:</span> <span class="p">{})</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">type</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">listener</span><span class="o">:</span> <span class="nx">EventListenerOrEventListenerObject</span><span class="p">,</span> <span class="nx">options</span><span class="o">?:</span> <span class="p">{})</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">declare</span> <span class="nx">type</span> <span class="nx">Proxy</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">declare</span> <span class="kr">const</span> <span class="nx">Comlink</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">proxy</span><span class="o">:</span> <span class="p">(</span><span class="nx">endpoint</span><span class="o">:</span> <span class="nx">Window</span> <span class="o">|</span> <span class="nx">Endpoint</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Function</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">proxyValue</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="p">{})</span> <span class="o">=&gt;</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">expose</span><span class="o">:</span> <span class="p">(</span><span class="nx">rootObj</span><span class="o">:</span> <span class="nb">Object</span> <span class="o">|</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">Window</span> <span class="o">|</span> <span class="nx">Endpoint</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install comlinkjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// On the site:</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// WebWorkers use `postMessage` and therefore work with Comlink.</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">Comlink</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="nx">worker</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nx">async</span> <span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Note the usage of `await`:</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">await</span> <span class="k">new</span> <span class="nx">api</span><span class="p">.</span><span class="nx">App</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Counter</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">inc</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Counter</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// In the worker</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">get</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_counter</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">inc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Comlink</span><span class="p">.</span><span class="nx">expose</span><span class="p">({</span><span class="nx">App</span><span class="p">},</span> <span class="nx">self</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/comlinkjs/comlinkjs.gif" alt="comlinkjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[async-retry]]></title>
    <link href="http://nmotw.in/async-retry/"/>
    <updated>2017-09-14T22:50:23+05:30</updated>
    <id>http://nmotw.in/async-retry</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/async-retry">async-retry</a></h1>

<blockquote><p>Retrying made simple, easy, async.</p></blockquote>

<p><code>async-retry</code> is a promisified version of <a href="https://www.npmjs.com/package/retry">retry</a> which makes things easier with the <code>async-await</code> syntax.</p>

<p><strong>Get it:</strong> <code>npm install async-retry</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Packages </span>
</span><span class='line'><span class="kr">const</span> <span class="nx">retry</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async-retry&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-fetch&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">await</span> <span class="nx">retry</span><span class="p">(</span><span class="nx">async</span> <span class="nx">bail</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// if anything throws, we retry </span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;https://google.com&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">403</span> <span class="o">===</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// don&#39;t retry upon 403 </span>
</span><span class='line'>    <span class="nx">bail</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Unauthorized&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'><span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">retries</span><span class="o">:</span> <span class="mi">500</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Method signature:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">retry</span><span class="p">(</span><span class="nx">retrier</span> <span class="o">:</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">:</span> <span class="nb">Object</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Promise</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/async-retry/async-retry.gif" alt="async-retry" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[build.sh]]></title>
    <link href="http://nmotw.in/build.sh/"/>
    <updated>2017-09-08T10:03:31+05:30</updated>
    <id>http://nmotw.in/build.sh</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/build.sh">build.sh</a></h1>

<blockquote><p>🔨 run and visualize the build process.</p></blockquote>

<p><code>build.sh</code> is one of those unquie node module which likes to take an atypical route in solving problems, this module helps in running and visualize the build process, makes use of <code>build.yml</code> at the root of your project for the build pipleline meta-data.</p>

<p><strong>Get it:</strong> <code>npm install -g build.sh</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>build <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>
</span><span class='line'>  -V, --version        output the version number
</span><span class='line'>  -c, --config <span class="o">[</span>file<span class="o">]</span>  the input file <span class="k">for </span>the build pipeline to run
</span><span class='line'>  -d, --debug          outputs a debug file of the build process and data captured
</span><span class='line'>  -h, --help           output usage information
</span></code></pre></td></tr></table></div></figure>


<p>To invoke about the pipeline simply run <code>build</code> at the project root. The terminal output will show the pipeline being run and eventually will open the browser to the location of the final report.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># cat .build.yml</span>
</span><span class='line'>
</span><span class='line'>pipeline:
</span><span class='line'>  <span class="o">{</span>key<span class="o">}</span>:
</span><span class='line'>    - <span class="o">{</span><span class="nb">command</span><span class="o">}</span>
</span><span class='line'>    - <span class="o">{</span><span class="nb">command</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample <code>.build.yml</code>:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">output</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">./docs</span>
</span><span class='line'><span class="l-Scalar-Plain">pipeline</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm --version</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">node --version</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm install</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ls -lh node_modules</span>
</span><span class='line'>  <span class="l-Scalar-Plain">lint</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm run lint</span>
</span><span class='line'>  <span class="l-Scalar-Plain">coverage</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm run coverage</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docs</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm run generate-docs</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/build.sh/build.sh.gif" alt="build.sh" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nickjs]]></title>
    <link href="http://nmotw.in/nickjs/"/>
    <updated>2017-09-01T10:15:18+05:30</updated>
    <id>http://nmotw.in/nickjs</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/nickjs">nickjs</a></p>

<blockquote><p>Headless browser automation library</p></blockquote>

<p><code>nickjs</code> Modern, simple &amp; powerful browser automation library.</p>

<ul>
<li><p>Works on all dynamic sites.</p></li>
<li><p>async-await ready.</p></li>
<li><p>Multi-driver support.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install nickjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Nick</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;nickjs&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">nick</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Nick</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">;(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">tab</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">nick</span><span class="p">.</span><span class="nx">newTab</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;news.ycombinator.com&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">untilVisible</span><span class="p">(</span><span class="s2">&quot;#hnmain&quot;</span><span class="p">)</span> <span class="c1">// Make sure we have loaded the page</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">inject</span><span class="p">(</span><span class="s2">&quot;../injectables/jquery-3.0.0.min.js&quot;</span><span class="p">)</span> <span class="c1">// We&#39;re going to use jQuery to scrape</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">hackerNewsLinks</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">((</span><span class="nx">arg</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Here we&#39;re in the page context. It&#39;s like being in your browser&#39;s inspector tool</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.athing&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">((</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">title</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.storylink&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
</span><span class='line'>              <span class="nx">url</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.storylink&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">hackerNewsLinks</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">})()</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Job done!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nick</span><span class="p">.</span><span class="nx">exit</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Something</span> <span class="nx">went</span> <span class="nx">wrong</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">err</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nick</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/nickjs/nickjs.gif" alt="nickjs.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mitt]]></title>
    <link href="http://nmotw.in/mitt/"/>
    <updated>2017-08-27T18:30:28+05:30</updated>
    <id>http://nmotw.in/mitt</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/developit/mitt">mitt</a></h1>

<blockquote><p>Tiny 200b functional event emitter / pubsub.</p></blockquote>

<p>Sweet little implementation of <code>pubsub</code> patter, uses <code>flow</code> internally and provides the below functionality:</p>

<ul>
<li><p><code>on</code> : Register an event handler for the given type.</p></li>
<li><p><code>off</code> : Remove an event handler for the given type.</p></li>
<li><p><code>emit</code>: Invoke all handlers for the given type.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install mitt</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mitt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mitt&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">emitter</span> <span class="o">=</span> <span class="nx">mitt</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// listen to an event</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// listen to all events</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fire an event</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// working with handler references:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">onFoo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">onFoo</span><span class="p">)</span>   <span class="c1">// listen</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">onFoo</span><span class="p">)</span>  <span class="c1">// unlisten</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/mitt/mitt.gif" alt="mitt" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gtop]]></title>
    <link href="http://nmotw.in/gtop/"/>
    <updated>2017-08-18T13:25:20+05:30</updated>
    <id>http://nmotw.in/gtop</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/gtop">gtop</a></h1>

<blockquote><p>System monitoring dashboard for terminal.</p></blockquote>

<p><code>gtop</code> could be termed as the node's version of <a href="http://hisham.hm/htop/">htop</a>, gives a very need interface on the cli that would list out the below:</p>

<ul>
<li><p>CPU history.</p></li>
<li><p>Memory and Swap History.</p></li>
<li><p>Memory and Netowrk usage.</p></li>
<li><p>Disk usage.</p></li>
<li><p>Process list.</p></li>
</ul>


<p>You can sort the process table by pressing:</p>

<p><code>p</code>: Process Id
<code>c</code>: CPU usage
<code>m</code>: Memory usage</p>

<p><strong>Get it:</strong> <code>npm install -g gtop</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gtop
</span><span class='line'>
</span><span class='line'># In case of font issues: LANG=en_US.utf8 TERM=xterm-256color gtop</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/gtop/gtop.gif" alt="gtop" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[csrf]]></title>
    <link href="http://nmotw.in/csrf/"/>
    <updated>2017-08-11T15:14:21+05:30</updated>
    <id>http://nmotw.in/csrf</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/csrf">csrf</a></h1>

<blockquote><p>Logic behind CSRF token creation and verification.</p></blockquote>

<p>Tiny and effective module that helps you to create and verify <code>csrf</code> tokens.</p>

<p><strong>Get it:</strong> <code>npm install csrf</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Tokens</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;csrf&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">function Tokens() =&gt;</span>
</span><span class='line'><span class="cm">    name: &quot;Tokens&quot;</span>
</span><span class='line'><span class="cm">    prototype: Tokens</span>
</span><span class='line'><span class="cm">    _tokenize: function()</span>
</span><span class='line'><span class="cm">    create: function()</span>
</span><span class='line'><span class="cm">    secret: function()</span>
</span><span class='line'><span class="cm">    secretSync: function()</span>
</span><span class='line'><span class="cm">    verify: function()</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">tokens</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tokens</span><span class="p">();</span>
</span><span class='line'><span class="nx">await</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">secret</span><span class="p">()</span>
</span><span class='line'><span class="c1">//^ Something like &quot;8SOJmA_ewWfI0g9qKbcuSvhC&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// also</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">secretSync</span><span class="p">()</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">tokens</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// verify</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">secret</span><span class="p">,</span> <span class="nx">token</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;invalid token!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/csrf/csrf.gif" alt="csrf.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fitty]]></title>
    <link href="http://nmotw.in/fitty/"/>
    <updated>2017-08-03T13:03:33+05:30</updated>
    <id>http://nmotw.in/fitty</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fitty">fitty</a></h1>

<blockquote><p>Makes text fit perfectly.</p></blockquote>

<p>Fitty, Snugly text resizing: Scales up (or down) text so it fits perfectly to its parent container.</p>

<p>The crux is of fitty is the <code>fit</code> method which marks the fitty as dirty and requests a redraw (this will also redraw any other fitty marked as dirty).</p>

<p><strong>Get it:</strong> <code>npm install fitty</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>const fitty = require(&#39;fitty&#39;);
</span><span class='line'>
</span><span class='line'>fitty(&#39;#my-element);
</span></code></pre></td></tr></table></div></figure>


<p>Default options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">defaultOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">minSize</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">maxSize</span><span class="o">:</span> <span class="mi">512</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">multiLine</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">observeMutations</span><span class="o">:</span> <span class="s1">&#39;MutationObserver&#39;</span> <span class="k">in</span> <span class="nx">w</span> <span class="o">?</span> <span class="nx">mutationObserverDefaultSetting</span> <span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it uses <code>MutationObserver</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fitty/fitty.gif" alt="fitty" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[axe-cli]]></title>
    <link href="http://nmotw.in/axe-cli/"/>
    <updated>2017-07-27T16:59:41+05:30</updated>
    <id>http://nmotw.in/axe-cli</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/axe-cli">axe-cli</a></h1>

<blockquote><p>A CLI for accessibility testing using axe-core</p></blockquote>

<p>Provides a command line interface for <code>aXe</code> to run quick accessibility tests.</p>

<p><strong>Get it:</strong> <code>npm install -g axe-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ axe www.google.com, github.com</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  --rules flag to set which rules you wish to run
</span><span class='line'>$ axe www.google.com --rules color-contrast,html-has-lang</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  --tags to tell axe to run all rules that have that specific tag.
</span><span class='line'>axe www.google.com --tags wcag2a</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Saving the results
</span><span class='line'>$ axe www.google.com --save google-site.json
</span><span class='line'>$ axe www.google.com --dir ./google-results/</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Defining the scope
</span><span class='line'>axe www.google.com --include #main --exclude #aside</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/axe-cli/axe-cli.gif" alt="axe-cli.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mdconf]]></title>
    <link href="http://nmotw.in/mdconf/"/>
    <updated>2017-07-20T09:59:26+05:30</updated>
    <id>http://nmotw.in/mdconf</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mdconf">mdconf</a></h1>

<blockquote><p>Markdown driven configuration!</p></blockquote>

<p>Sweet and simple markdown files are your config!</p>

<p>Markdown headings act as keys, list items with <code>:</code> act as maps, otherwise regular lists behave as.. lists.</p>

<p><strong>Get it:</strong> <code>npm install mdconf</code></p>

<p><strong>Usage sample:</strong></p>

<p>```
const mdconf = require("mdconf");</p>

<p>// conf normally goes into a diffrent file.
conf = `</p>

<h2>Server</h2>

<ul>
<li>host: cloudup.com</li>
<li>port: 3000</li>
<li>http: enabled</li>
<li>https: enabled`;</li>
</ul>


<p>console.log(mdconf(conf));</p>

<p>/*
{ server:
   { host: 'cloudup.com',</p>

<pre><code> port: '3000',
 http: 'enabled',
 https: 'enabled' 
} 
</code></pre>

<p>}
*/</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/mdconf/mdconf.gif" alt="mdconf.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npx]]></title>
    <link href="http://nmotw.in/npx/"/>
    <updated>2017-07-15T11:07:12+05:30</updated>
    <id>http://nmotw.in/npx</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npx">npx</a></h1>

<blockquote><p>an npm package runner.</p></blockquote>

<p>Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run.</p>

<p>P.S: <code>npm@5.2.0</code> is shipped with <code>npx</code>!</p>

<p><strong>Get it:</strong> <code>npm install -g npx</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm i -D cowsay
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>npx cowsay <span class="s2">&quot;HolyCow!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/npx/npx.gif" alt="npx.gif" /></p>

<p>P.S: In case you have missed reading <a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b">Introducing npx: an npm package runner
</a>, do read it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stikcybits]]></title>
    <link href="http://nmotw.in/stikcybits/"/>
    <updated>2017-07-08T15:28:28+05:30</updated>
    <id>http://nmotw.in/stikcybits</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/stickybits">stickybits</a></h1>

<blockquote><p>Alternative to position: sticky polyfills.</p></blockquote>

<ul>
<li><p>Aprox <code>~2KB</code> of javascript that would help us to know when a DOM element is stuck (position:sticky).</p></li>
<li><p>It can add a CSS Sticky Class <code>.js-is-sticky</code> when <code>position: sticky</code> elements become active and a CSS Stuck Class <code>.js-is-stuck</code> when they become stuck.</p></li>
<li><p>Loosely mimics <code>position: sticky</code> to consistently stick elements vertically across multiple platforms.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install stickybits</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="nx">stickybits</span><span class="p">(</span><span class="s1">&#39;selector&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="cm">/*</span>
</span><span class='line'><span class="cm">Options:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    - target = el (DOM element)</span>
</span><span class='line'><span class="cm">    - offset = 0 || &#39;dealer&#39;s choice&#39;</span>
</span><span class='line'><span class="cm">    - verticalPosition = top || bottom</span>
</span><span class='line'><span class="cm">    - useStickyClasses = true || false</span>
</span><span class='line'><span class="cm">    - elStyles = CSS Styles</span>
</span><span class='line'><span class="cm">    - positionVal = fixed || sticky</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/stickybits/stickybits.gif" alt="stickybits.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[base64-async]]></title>
    <link href="http://nmotw.in/base64-async/"/>
    <updated>2017-06-29T13:57:23+05:30</updated>
    <id>http://nmotw.in/base64-async</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/base64-async">base64-async</a></h1>

<blockquote><p>Non-blocking chunked Base64 encoding.</p></blockquote>

<p><code>base64-async</code> helps us in processing large <code>Base64</code> documents without blocking the event loop, one can configure chunk size option to optimise for your use case.</p>

<p>This module exposes: <code>b64</code>, <code>encode</code> and <code>decode</code> methods which accepts <code>(input, [options])</code> and returns a promise on innvocation.</p>

<p><strong>Get it:</strong> <code>npm install --save base64-async</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">b64</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;base64-async&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;somehugefile.jpg&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">b64</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">fileBuffer</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">b64String</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b64String</span><span class="p">));</span>
</span><span class='line'><span class="c1">// aGkgbXVt... </span>
</span><span class='line'>
</span><span class='line'><span class="nx">b64</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">b64String</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">buffer</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">buffer</span><span class="p">));</span>
</span><span class='line'><span class="c1">// &lt;Buffer 68 69 20 6d 75 6d ... &gt; </span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or, for the cool kids </span>
</span><span class='line'><span class="kr">const</span> <span class="nx">b64String</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">fileBuffer</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">originalFileBuffer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">b64String</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// which is equivalent to this </span>
</span><span class='line'><span class="kr">const</span> <span class="nx">b64String</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">(</span><span class="nx">fileBuffer</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">originalFileBuffer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">(</span><span class="nx">b64String</span><span class="p">);</span>
</span><span class='line'><span class="c1">// If no method is specified, buffers are encoded, strings are decoded</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/base64-async/base64-async.gif" alt="base64-async.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dom-scroll-into-view]]></title>
    <link href="http://nmotw.in/dom-scroll-into-view/"/>
    <updated>2017-06-18T15:32:27+05:30</updated>
    <id>http://nmotw.in/dom-scroll-into-view</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dom-scroll-into-view">dom-scroll-into-view</a></h1>

<blockquote><p>scroll node in contain to make node visible</p></blockquote>

<p><code>dom-scroll-into-view</code> a dom util that helps in scrolling to node that is targeted.</p>

<p><strong>Get it:</strong> <code>npm install dom-scroll-into-view</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">scrollIntoView</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dom-scroll-into-view&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span><span class="nx">container</span><span class="p">,</span><span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//config</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="nx">alignWithLeft</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">alignWithTop</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">allowHorizontalScroll</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">onlyScrollIfNeeded</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetTop</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetLeft</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetBottom</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetRight</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dom-scroll-into-view/dom-scroll-into-view.gif" alt="dom-scroll-into-view.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vtop]]></title>
    <link href="http://nmotw.in/vtop/"/>
    <updated>2017-06-10T15:59:12+05:30</updated>
    <id>http://nmotw.in/vtop</id>
    <content type="html"><![CDATA[<h1><a href="https://npmjs.org/packages/vtop">vtop</a></h1>

<blockquote><p>A graphical activity monitor for the command line.</p></blockquote>

<p><strong>Why?</strong></p>

<p>For mointoring CPU usage and memory across multi-process applications.</p>

<p>Makes use of <a href="https://www.npmjs.com/package/drawille">drawille</a> for drawing in terminal with unicode braille characters.</p>

<p><strong>Get it:</strong> <code>npm i -g vtop</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  nmotw.in&gt;  vtop --help
</span><span class='line'>
</span><span class='line'>  Usage: vtop <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  Options:
</span><span class='line'>
</span><span class='line'>    -h, --help              output usage information
</span><span class='line'>    -t, --theme  <span class="o">[</span>name<span class="o">]</span>     <span class="nb">set </span>the vtop theme <span class="o">[</span>acid|becca|brew|dark|monokai|parallax|seti|wizard<span class="o">]</span>
</span><span class='line'>    --quit-after <span class="o">[</span>seconds<span class="o">]</span>  Quits vtop after interval
</span><span class='line'>    -V, --version           output the version number
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/vtop/vtop.gif" alt="vtop.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[covfefe]]></title>
    <link href="http://nmotw.in/covfefe/"/>
    <updated>2017-06-01T19:39:33+05:30</updated>
    <id>http://nmotw.in/covfefe</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/covfefe">covfefe</a></h1>

<blockquote><p>Despite the constant negative press covfefe.</p></blockquote>

<p>Time for a fun module this week, it's <code>covfefe</code>. (Hope you are aware of <a href="https://archive.is/f7UL3">it</a>!)</p>

<p><strong>Get it:</strong> <code>npm install covfefe</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kr">const</span> <span class="nx">covfefe</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;covfefe&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">covfefe</span><span class="p">(</span><span class="s1">&#39;Despite the constant negative press&#39;</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;Despite the constant negative press covfefe&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">covfefe</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="s1">&#39;I have good coverage of spray tan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;I have good covfefe of spray tan&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/covfefe/covfefe.gif" alt="covfefe.gif" /></p>
]]></content>
  </entry>
  
</feed>
