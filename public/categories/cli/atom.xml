<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://nmotw.in//github/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://nmotw.in//github/"/>
  <updated>2018-04-07T17:04:34+05:30</updated>
  <id>http://nmotw.in//github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[prompts]]></title>
    <link href="http://nmotw.in//github/prompts/"/>
    <updated>2018-03-22T23:39:35+05:30</updated>
    <id>http://nmotw.in//github/prompts</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/prompts">prompts</a></h1>

<blockquote><p>Lightweight, beautiful and user-friendly interactive CLI prompts</p></blockquote>

<p><code>prompts</code> Zero dep, promise based, unifined CLI prompt.</p>

<p><strong>Get it:</strong> <code>npm install prompts</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
const prompts = require('prompts');</p>

<p>let questions = [</p>

<pre><code>{
    type: 'text',
    name: 'dish',
    message: 'Do you like pizza?'
},
{
    type: prev =&gt; prev == 'pizza' ? 'text' : null,
    name: 'topping',
    message: 'Name a topping'
}
</code></pre>

<p>];</p>

<p>let response = await prompts(questions);
```</p>

<p><strong>API:</strong></p>

<p>```
prompts(prompts, options);</p>

<p>/*
prompts:
Type: Array|Object</p>

<p>options: onSubmit or onCancel functions.</p>

<p>prompt object properties:</p>

<p>{
  type: String || Function,
  name: String || Function,
  message: String || Function,
  initial: String || Function || Async Function
  format: Function || Async Function,
  onState: Function
}
*/
```</p>

<p><strong>GIT FTW!</strong></p>

<p><img src="/images/prompts/prompts.gif" alt="prompts.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fkill]]></title>
    <link href="http://nmotw.in//github/fkill/"/>
    <updated>2018-03-18T09:01:19+05:30</updated>
    <id>http://nmotw.in//github/fkill</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fkill">fkill</a></h1>

<blockquote><p>Fabulously kill processes. Cross-platform.</p></blockquote>

<p>You you have mostly used something like: <code>pgrep &lt;progress&gt;</code> <code>kill -9 &lt;pid&gt;</code> <code>pkill &lt;procees&gt;</code>, but <code>fkill</code> makes it fabulosusly easy to kill!</p>

<p><strong>Get it:</strong> <code>npm install [-g] fkill[-cli]</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
// API
const fkill = require('fkill');</p>

<p>fkill(8080).then(() => {</p>

<pre><code>console.log('Killed process');
</code></pre>

<p>});</p>

<p>fkill('Chrome');
fkill(':8080');</p>

<p>fkill([1337, 'Chrome', ':8080']);
```</p>

<p>```</p>

<h1>cli</h1>

<p>âžœ  ~ fkill --help</p>

<p>  Fabulously kill processes. Cross-platform.</p>

<p>  Usage</p>

<pre><code>$ fkill [&lt;pid|name|:port&gt; â€¦]
</code></pre>

<p>  Options</p>

<pre><code>--force -f    Force kill
--verbose -v  Show process arguments
</code></pre>

<p>  Examples</p>

<pre><code>$ fkill 1337
$ fkill safari
$ fkill :8080
$ fkill 1337 safari :8080
$ fkill
</code></pre>

<p>  To kill a port, prefix it with a colon. For example: :8080.</p>

<p>  Run without arguments to use the interactive interface.
  The process name is case insensitive.
  ```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fkill/fkill.gif" alt="fkill.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thanks]]></title>
    <link href="http://nmotw.in//github/thanks/"/>
    <updated>2018-02-09T17:04:21+05:30</updated>
    <id>http://nmotw.in//github/thanks</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/thanks">thanks</a></h1>

<blockquote><p>ðŸ™Œ Give thanks to the open source maintainers you depend on! âœ¨</p></blockquote>

<p><code>thanks</code> picks up the "nearest" <code>package.json</code> / <code>node_modules</code> folder and fetch all the mainterners who are seeking donation and lists them all in a neat table with the donation URL.</p>

<p><strong>Get it:</strong> <code>npm install -g thanks</code></p>

<p><strong>Usage:</strong></p>

<p>```sh
$ thanks --help</p>

<p>thanks - ðŸ™Œ Give thanks to the open source maintainers you depend on! âœ¨</p>

<p>Usage:</p>

<pre><code>thanks &lt;flags&gt; [CWD]

If CWD is omitted, then the current working directory is used. The "nearest"
package.json / node_modules folder will be used.
</code></pre>

<p>Flags:</p>

<pre><code>-v, --version   Show current version
-h, --help      Show usage information
</code></pre>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/thanks/thanks.gif" alt="thanks.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[portscanner]]></title>
    <link href="http://nmotw.in//github/portscanner/"/>
    <updated>2017-12-17T15:16:40+05:30</updated>
    <id>http://nmotw.in//github/portscanner</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/portscanner">portscanner</a></h1>

<blockquote><p>port scanner!</p></blockquote>

<p><code>portscanner</code> helps us to check the port status and free port for a given host.</p>

<p><strong>Get it:</strong> <code>npm install portscanner</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js</p>

<p>const portScanner = require('portscanner');</p>

<p>portscanner.checkPortStatus(3000, '127.0.0.1')
.then(console.log);</p>

<p>portscanner.findAPortInUse([3000, 3005, 3006], '127.0.0.1')
.then(console.log)
.catch(console.error);
```</p>

<p><strong>GIF FTW</strong></p>

<p><img src="/images/portscanner/portscanner.gif" alt="portscanner.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qrcode-terminal]]></title>
    <link href="http://nmotw.in//github/qrcode-terminal/"/>
    <updated>2017-10-31T12:56:26+05:30</updated>
    <id>http://nmotw.in//github/qrcode-terminal</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/qrcode-terminal">qrcode-terminal</a></p>

<blockquote><p>qrcode on terminal.</p></blockquote>

<p><code>qrcode-terminal</code> Going where no QRCode has gone before ;)</p>

<p>Helps you to generate qrcode in your terminal, maybe be URLs or just plain text, this module does a good job in displaying the qrcode on terminal.</p>

<p>It would be great if this module can generate responsive qr-code in the terminal, which can be bit of a challenge, it can generate <code>small</code> or <code>normal</code> ones though.</p>

<p><strong>Get it:</strong> <code>npm install qrcode-terminal</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
const qrcode = require('qrcode-terminal');</p>

<p>qrcode.generate('This will be a QRCode, eh!');</p>

<p>qrcode.setErrorLevel('Q');
qrcode.generate('This will be a QRCode with error level Q!');</p>

<p>qrcode.generate('https://nmotw.in', function (qrcode) {</p>

<pre><code>console.log(qrcode);
</code></pre>

<p>});
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/qrcode-terminal/qrcode-terminal.gif" alt="qrcode-terminal" /></p>
]]></content>
  </entry>
  
</feed>
