<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2017-07-27T17:07:34+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[axe-cli]]></title>
    <link href="http://nmotw.in/axe-cli/"/>
    <updated>2017-07-27T16:59:41+05:30</updated>
    <id>http://nmotw.in/axe-cli</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/axe-cli">axe-cli</a></h1>

<blockquote><p>A CLI for accessibility testing using axe-core</p></blockquote>

<p>Provides a command line interface for <code>aXe</code> to run quick accessibility tests.</p>

<p><strong>Get it:</strong> <code>npm install -g axe-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ axe www.google.com, github.com</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  --rules flag to set which rules you wish to run
</span><span class='line'>$ axe www.google.com --rules color-contrast,html-has-lang</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  --tags to tell axe to run all rules that have that specific tag.
</span><span class='line'>axe www.google.com --tags wcag2a</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Saving the results
</span><span class='line'>$ axe www.google.com --save google-site.json
</span><span class='line'>$ axe www.google.com --dir ./google-results/</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Defining the scope
</span><span class='line'>axe www.google.com --include #main --exclude #aside</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/axe-cli/axe-cli.gif" alt="axe-cli.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mdconf]]></title>
    <link href="http://nmotw.in/mdconf/"/>
    <updated>2017-07-20T09:59:26+05:30</updated>
    <id>http://nmotw.in/mdconf</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mdconf">mdconf</a></h1>

<blockquote><p>Markdown driven configuration!</p></blockquote>

<p>Sweet and simple markdown files are your config!</p>

<p>Markdown headings act as keys, list items with <code>:</code> act as maps, otherwise regular lists behave as.. lists.</p>

<p><strong>Get it:</strong> <code>npm install mdconf</code></p>

<p><strong>Usage sample:</strong></p>

<p>```
const mdconf = require("mdconf");</p>

<p>// conf normally goes into a diffrent file.
conf = `</p>

<h2>Server</h2>

<ul>
<li>host: cloudup.com</li>
<li>port: 3000</li>
<li>http: enabled</li>
<li>https: enabled`;</li>
</ul>


<p>console.log(mdconf(conf));</p>

<p>/*
{ server:
   { host: 'cloudup.com',</p>

<pre><code> port: '3000',
 http: 'enabled',
 https: 'enabled' 
} 
</code></pre>

<p>}
*/</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/mdconf/mdconf.gif" alt="mdconf.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npx]]></title>
    <link href="http://nmotw.in/npx/"/>
    <updated>2017-07-15T11:07:12+05:30</updated>
    <id>http://nmotw.in/npx</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npx">npx</a></h1>

<blockquote><p>an npm package runner.</p></blockquote>

<p>Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run.</p>

<p>P.S: <code>npm@5.2.0</code> is shipped with <code>npx</code>!</p>

<p><strong>Get it:</strong> <code>npm install -g npx</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm i -D cowsay
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>npx cowsay <span class="s2">&quot;HolyCow!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/npx/npx.gif" alt="npx.gif" /></p>

<p>P.S: In case you have missed reading <a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b">Introducing npx: an npm package runner
</a>, do read it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stikcybits]]></title>
    <link href="http://nmotw.in/stikcybits/"/>
    <updated>2017-07-08T15:28:28+05:30</updated>
    <id>http://nmotw.in/stikcybits</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/stickybits">stickybits</a></h1>

<blockquote><p>Alternative to position: sticky polyfills.</p></blockquote>

<ul>
<li><p>Aprox <code>~2KB</code> of javascript that would help us to know when a DOM element is stuck (position:sticky).</p></li>
<li><p>It can add a CSS Sticky Class <code>.js-is-sticky</code> when <code>position: sticky</code> elements become active and a CSS Stuck Class <code>.js-is-stuck</code> when they become stuck.</p></li>
<li><p>Loosely mimics <code>position: sticky</code> to consistently stick elements vertically across multiple platforms.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install stickybits</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="nx">stickybits</span><span class="p">(</span><span class="s1">&#39;selector&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="cm">/*</span>
</span><span class='line'><span class="cm">Options:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    - target = el (DOM element)</span>
</span><span class='line'><span class="cm">    - offset = 0 || &#39;dealer&#39;s choice&#39;</span>
</span><span class='line'><span class="cm">    - verticalPosition = top || bottom</span>
</span><span class='line'><span class="cm">    - useStickyClasses = true || false</span>
</span><span class='line'><span class="cm">    - elStyles = CSS Styles</span>
</span><span class='line'><span class="cm">    - positionVal = fixed || sticky</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/stickybits/stickybits.gif" alt="stickybits.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[base64-async]]></title>
    <link href="http://nmotw.in/base64-async/"/>
    <updated>2017-06-29T13:57:23+05:30</updated>
    <id>http://nmotw.in/base64-async</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/base64-async">base64-async</a></h1>

<blockquote><p>Non-blocking chunked Base64 encoding.</p></blockquote>

<p><code>base64-async</code> helps us in processing large <code>Base64</code> documents without blocking the event loop, one can configure chunk size option to optimise for your use case.</p>

<p>This module exposes: <code>b64</code>, <code>encode</code> and <code>decode</code> methods which accepts <code>(input, [options])</code> and returns a promise on innvocation.</p>

<p><strong>Get it:</strong> <code>npm install --save base64-async</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">b64</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;base64-async&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;somehugefile.jpg&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">b64</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">fileBuffer</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">b64String</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b64String</span><span class="p">));</span>
</span><span class='line'><span class="c1">// aGkgbXVt... </span>
</span><span class='line'>
</span><span class='line'><span class="nx">b64</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">b64String</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">buffer</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">buffer</span><span class="p">));</span>
</span><span class='line'><span class="c1">// &lt;Buffer 68 69 20 6d 75 6d ... &gt; </span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or, for the cool kids </span>
</span><span class='line'><span class="kr">const</span> <span class="nx">b64String</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">fileBuffer</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">originalFileBuffer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">b64String</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// which is equivalent to this </span>
</span><span class='line'><span class="kr">const</span> <span class="nx">b64String</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">(</span><span class="nx">fileBuffer</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">originalFileBuffer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">b64</span><span class="p">(</span><span class="nx">b64String</span><span class="p">);</span>
</span><span class='line'><span class="c1">// If no method is specified, buffers are encoded, strings are decoded</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/base64-async/base64-async.gif" alt="base64-async.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dom-scroll-into-view]]></title>
    <link href="http://nmotw.in/dom-scroll-into-view/"/>
    <updated>2017-06-18T15:32:27+05:30</updated>
    <id>http://nmotw.in/dom-scroll-into-view</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dom-scroll-into-view">dom-scroll-into-view</a></h1>

<blockquote><p>scroll node in contain to make node visible</p></blockquote>

<p><code>dom-scroll-into-view</code> a dom util that helps in scrolling to node that is targeted.</p>

<p><strong>Get it:</strong> <code>npm install dom-scroll-into-view</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">scrollIntoView</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dom-scroll-into-view&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span><span class="nx">container</span><span class="p">,</span><span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//config</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="nx">alignWithLeft</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">alignWithTop</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">allowHorizontalScroll</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">onlyScrollIfNeeded</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetTop</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetLeft</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetBottom</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">offsetRight</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dom-scroll-into-view/dom-scroll-into-view.gif" alt="dom-scroll-into-view.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[covfefe]]></title>
    <link href="http://nmotw.in/covfefe/"/>
    <updated>2017-06-01T19:39:33+05:30</updated>
    <id>http://nmotw.in/covfefe</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/covfefe">covfefe</a></h1>

<blockquote><p>Despite the constant negative press covfefe.</p></blockquote>

<p>Time for a fun module this week, it's <code>covfefe</code>. (Hope you are aware of <a href="https://archive.is/f7UL3">it</a>!)</p>

<p><strong>Get it:</strong> <code>npm install covfefe</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kr">const</span> <span class="nx">covfefe</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;covfefe&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">covfefe</span><span class="p">(</span><span class="s1">&#39;Despite the constant negative press&#39;</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;Despite the constant negative press covfefe&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">covfefe</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="s1">&#39;I have good coverage of spray tan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;I have good covfefe of spray tan&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/covfefe/covfefe.gif" alt="covfefe.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nif]]></title>
    <link href="http://nmotw.in/nif/"/>
    <updated>2017-05-27T04:34:09+05:30</updated>
    <id>http://nmotw.in/nif</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/nif">nif</a></h1>

<blockquote><p><code>node --inspect</code> a file and open devtool URL.</p></blockquote>

<p><code>nif</code> is for all the lazy folks trying to debug their node script, it runs the <code>node --inspect</code> on the provided file and open the devtool URL <code>chrome-devtools://</code>.</p>

<p>Make sure you have the <a href="https://github.com/prasmussen/chrome-cli">chrome-cli</a> installed on your machine,before using this moddule.</p>

<p><strong>Get it:</strong> <code>npm i -g nif</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nif ./to-debug.js
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/nif/nif.gif" alt="nif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mockdate]]></title>
    <link href="http://nmotw.in/mockdate/"/>
    <updated>2017-05-19T07:46:27+05:30</updated>
    <id>http://nmotw.in/mockdate</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mockdate">mockdate</a></h1>

<blockquote><p>Mock Date object that can be used to change when "now" is.</p></blockquote>

<p><code>mockdate</code> the names says it all!</p>

<p>This module save the current date context to <code>_date</code> and <code>_getTimezoneOffset = Date.prototype.getTimezoneOffset</code> internally and overwrites them with simpler custom implementation which would useful for unit tests et.al</p>

<p><strong>Get it:</strong> <code>npm install --save mockdate</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mockDate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mockdate&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">mockDate</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;2/1/1988&#39;</span><span class="p">,</span><span class="mi">120</span><span class="p">);</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'><span class="mi">1988</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">31</span><span class="nx">T18</span><span class="o">:</span><span class="mi">30</span><span class="o">:</span><span class="mf">00.000</span><span class="nx">Z</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/mockdate/mockdate.gif" alt="mockdate" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compactr]]></title>
    <link href="http://nmotw.in/compactr/"/>
    <updated>2017-05-13T04:47:16+05:30</updated>
    <id>http://nmotw.in/compactr</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/compactr">compactr</a></h1>

<blockquote><p>Schema based serialization made easy!</p></blockquote>

<p><strong>What is this and why does it matter?</strong> [From the horse's mouth]</p>

<p>Protocol Buffers are awesome. Having schemas to deflate and inflate data while maintaining some kind of validation is a great concept.
Compactr's goal is to build on that to better suit Node development and reduce repetition by allowing you to build schemas for your data directly in your scripting language.
For example, if you have a DB schema for a model, you could use that directly as a schema for Compactr.</p>

<p><strong>Get it:</strong> <code>npm install --save compactr</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Compactr</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;compactr&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">Compactr</span><span class="p">.</span><span class="nx">schema</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">bool</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;boolean&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">num</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;number&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">str</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">arr</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;array&#39;</span><span class="p">,</span> <span class="nx">items</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">obj</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;object&#39;</span><span class="p">,</span> <span class="nx">schema</span><span class="o">:</span> <span class="p">{</span> <span class="nx">sub</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// decode encoded.</span>
</span><span class='line'><span class="nx">Schema</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">Schema</span><span class="p">.</span><span class="nx">write</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">bool</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">num</span><span class="o">:</span> <span class="mf">23.23</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">str</span><span class="o">:</span> <span class="s1">&#39;hello world&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">arr</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">obj</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sub</span><span class="o">:</span> <span class="s1">&#39;way&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="nx">array</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Compactr</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;compactr&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defining a schema</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">userSchema</span> <span class="o">=</span> <span class="nx">Compactr</span><span class="p">.</span><span class="nx">schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;number&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Encoding</span>
</span><span class='line'><span class="nx">userSchema</span><span class="p">.</span><span class="nx">write</span><span class="p">({</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">123</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;John&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the schema header bytes (for partial loads)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">header</span> <span class="o">=</span> <span class="nx">userSchema</span><span class="p">.</span><span class="nx">headerBytes</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the partial load bytes</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">partial</span> <span class="o">=</span> <span class="nx">userSchema</span><span class="p">.</span><span class="nx">contentBytes</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the full header + content bytes</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">userSchema</span><span class="p">.</span><span class="nx">bytes</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Decoding (full)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">userSchema</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Decoding (partial)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">userSchema</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="nx">partial</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/compactr/compactr.gif" alt="compactr" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[await-to-js]]></title>
    <link href="http://nmotw.in/await-to-js/"/>
    <updated>2017-05-05T08:30:13+05:30</updated>
    <id>http://nmotw.in/await-to-js</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/await-to-js">await-to-js</a></h1>

<blockquote><p>Async await wrapper for easy error handling!</p></blockquote>

<p>Uber tiny module (10LOC) for making life easier while handling error while async-await.</p>

<p>This module is influenced by GoLang style of handling errors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data, err := db.Query("SELECT ...")  
</span><span class='line'>if err != nil { return err }  </span></code></pre></td></tr></table></div></figure>


<p>We would basically covert the below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">asyncTask</span> <span class="o">=</span> <span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// any async task.</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Handle error.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">to</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;await-to-js&quot;</span><span class="p">).</span><span class="k">default</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">asyncTask</span> <span class="o">=</span> <span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">result</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">to</span><span class="p">(</span><span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="nx">retrun</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">asyncTask</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install --save await-to-json</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/await-to-js/await-to-js.gif" alt="await-to-js" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tinytime]]></title>
    <link href="http://nmotw.in/tinytime/"/>
    <updated>2017-04-27T20:36:58+05:30</updated>
    <id>http://nmotw.in/tinytime</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/tinytime">tinytime</a></h1>

<blockquote><p>A straightforward date and time formatter in 800b.</p></blockquote>

<p><strong>Get it:</strong> <code>npm install --save tinytime</code></p>

<p><code>tinytime</code> exports a single function that returns a template object. This object has a single method, <code>render</code>, which
takes a <code>Date</code> and returns a string with the rendered data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">tinytime</span> <span class="nx">from</span> <span class="s1">&#39;tinytime&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">tinytime</span><span class="p">(</span><span class="s1">&#39;The time is {h}:{mm}:{ss}{a}.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">template</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="c1">// The time is 11:10:20PM.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Substitutions:</strong></p>

<ul>
<li><code>MMMM</code> - Full Month (September)</li>
<li><code>MM</code> - Partial Month (Sep)</li>
<li><code>Mo</code> - Numeric Month (9)</li>
<li><code>YYYY</code> - Full Year (1992)</li>
<li><code>YY</code> - Partial Year (92)</li>
<li><code>dddd</code> - Day of the Week (Monday)</li>
<li><code>DD</code> - Day of the Month (24)</li>
<li><code>Do</code> - Day (24th)</li>
<li><code>h</code> - Hours - 12h format</li>
<li><code>H</code> - Hours - 24h format</li>
<li><code>mm</code> - Minutes (zero padded)</li>
<li><code>ss</code> - Seconds (zero padded)</li>
<li><code>a</code> - AM/PM</li>
</ul>


<p> <strong>GIF FTW!</strong></p>

<p> <img src="http://nmotw.in/images/tinytime/tinytime.gif" alt="tinytime" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[psl]]></title>
    <link href="http://nmotw.in/psl/"/>
    <updated>2017-04-21T14:49:00+05:30</updated>
    <id>http://nmotw.in/psl</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/psl">psl</a></h1>

<blockquote><p>domain name parser based on the Public Suffix List.</p></blockquote>

<p><code>psl</code> parser uses <a href="https://www.npmjs.com/package/psl">The Public Suffix List</a> to parse and validate domain names.</p>

<p><strong>Get it:</strong> <code>npm install --save psl</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">psl</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;psl&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">psl</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;www.nmotw.in&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">    domain: &quot;nmotw.in&quot;</span>
</span><span class='line'><span class="cm">    input: &quot;www.nmotw.in&quot;</span>
</span><span class='line'><span class="cm">    listed: true</span>
</span><span class='line'><span class="cm">    sld: &quot;nmotw&quot;</span>
</span><span class='line'><span class="cm">    subdomain: &quot;www&quot;</span>
</span><span class='line'><span class="cm">    tld: &quot;in&quot;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">psl</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;www.食狮.公司.cn&#39;</span><span class="p">);</span>  <span class="c1">// &quot;食狮.公司.cn&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">psl</span><span class="p">.</span><span class="nx">isValid</span><span class="p">(</span><span class="s1">&#39;1.www.google.co.uk&#39;</span><span class="p">));</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">psl</span><span class="p">.</span><span class="nx">isValid</span><span class="p">(</span><span class="s1">&#39;co.uk&#39;</span><span class="p">));</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/psl/psl.gif" alt="psl" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[secure-keys]]></title>
    <link href="http://nmotw.in/secure-keys/"/>
    <updated>2017-04-14T16:11:06+05:30</updated>
    <id>http://nmotw.in/secure-keys</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/secure-keys">secure-keys</a></h1>

<blockquote><p>Encrypts and Decrypts object keys.</p></blockquote>

<p>This module uses node's inbuilt <code>crypto</code> to encrypt and decrypt object keys and the code was yanked out of work by
<a href="https://github.com/indexzero">@indexzero</a> for <a href="https://github.com/indexzero/nconf"><code>nconf</code></a></p>

<p><strong>Get it:</strong> <code>npm install --save secure-keys</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">secureKeys</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;secure-keys&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">sk</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">secureKeys</span><span class="p">({</span><span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;NOTW&#39;</span><span class="p">});</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">enCat</span> <span class="o">=</span> <span class="nx">sk</span><span class="p">.</span><span class="nx">encrypt</span><span class="p">({</span><span class="nx">cat</span><span class="o">:</span> <span class="s1">&#39;meow&#39;</span><span class="p">})</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">deCat</span> <span class="o">=</span> <span class="nx">sk</span><span class="p">.</span><span class="nx">decrypt</span><span class="p">(</span><span class="nx">enCat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;encrypted object:&#39;</span><span class="p">,</span> <span class="nx">enCat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;decrypted object:&#39;</span><span class="p">,</span> <span class="nx">deCat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">encrypted object: { cat: { alg: &#39;aes-256-ctr&#39;, value: &#39;3f1ead878c36&#39; } }</span>
</span><span class='line'>
</span><span class='line'><span class="cm">decrypted object: { cat: &#39;meow&#39; }</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">sec</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SecK</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;BEGIN RSA&#39;</span><span class="p">,</span> <span class="c1">// Text of key used for encrypting/decrypting </span>
</span><span class='line'>  <span class="nx">format</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">,</span> <span class="c1">// optional (defaults to JSON): An object with `stringify` and `parse` methods </span>
</span><span class='line'>  <span class="nx">alg</span><span class="o">:</span> <span class="s1">&#39;aes-256-ctr&#39;</span> <span class="c1">//optional (this is default) Algorithm to use for encrypt/decrypt </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/secure-keys/secure-keys.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what-input]]></title>
    <link href="http://nmotw.in/what-input/"/>
    <updated>2017-04-07T19:40:55+05:30</updated>
    <id>http://nmotw.in/what-input</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/what-input">what-input</a></p>

<blockquote><p>A global utility for tracking the current input method (mouse, keyboard or touch).</p></blockquote>

<p>What Input adds data attributes to the <html> tag based on the type of input being used.</p>

<p>It also exposes a simple API that can be used for scripting interactions.</p>

<p><strong>GET IT:</strong> <code>npm install --save what-input</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">whatInput</span><span class="p">.</span><span class="nx">ask</span><span class="p">();</span> <span class="c1">// returns `mouse`, `keyboard` or `touch`</span>
</span><span class='line'>
</span><span class='line'><span class="nx">whatInput</span><span class="p">.</span><span class="nx">types</span><span class="p">();</span> <span class="c1">// ex. returns [&#39;mouse&#39;, &#39;keyboard&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">whatInput</span><span class="p">.</span><span class="nx">ask</span><span class="p">(</span><span class="s1">&#39;loose&#39;</span><span class="p">);</span> <span class="c1">// returns `mouse` because mouse movement was detected</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">whatInput</span><span class="p">.</span><span class="nx">ask</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;mouse&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do mousy things</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">whatInput</span><span class="p">.</span><span class="nx">ask</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;keyboard&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do keyboard things</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Event mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// mapping of events to input types</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">inputMap</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;keyup&#39;</span><span class="o">:</span> <span class="s1">&#39;keyboard&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;mousedown&#39;</span><span class="o">:</span> <span class="s1">&#39;mouse&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;mousemove&#39;</span><span class="o">:</span> <span class="s1">&#39;mouse&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;MSPointerDown&#39;</span><span class="o">:</span> <span class="s1">&#39;pointer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;MSPointerMove&#39;</span><span class="o">:</span> <span class="s1">&#39;pointer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;pointerdown&#39;</span><span class="o">:</span> <span class="s1">&#39;pointer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;pointermove&#39;</span><span class="o">:</span> <span class="s1">&#39;pointer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;touchstart&#39;</span><span class="o">:</span> <span class="s1">&#39;touch&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/what-input/what-input.gif" alt="what-input" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aos]]></title>
    <link href="http://nmotw.in/aos/"/>
    <updated>2017-03-30T09:25:30+05:30</updated>
    <id>http://nmotw.in/aos</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/aos">aos</a></h1>

<blockquote><p>animate on scroll</p></blockquote>

<p>Small library to animate elements on your page as you scroll.</p>

<p><code>AOS</code> allows you to animate elements as you scroll down, and up.</p>

<p>If you scroll back to top, elements will animate to it's previous state and are ready to animate again if you scroll down.</p>

<p><strong>GET IT:</strong> <code>npm install --save</code></p>

<p><strong>Sample usage:</strong></p>

<p><code>html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-aos=</span><span class="s">&quot;animation_name&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">aos</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aos&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">aos</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Major set of animations: Fade, Flip, Slide, Zoom, Easing functions and anchor placements.</p>

<p><strong>GIF FTW!:</strong></p>

<p><img src="http://nmotw.in/images/aos/aos.gif" alt="aos" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iterare]]></title>
    <link href="http://nmotw.in/iterare/"/>
    <updated>2017-03-26T12:33:44+05:30</updated>
    <id>http://nmotw.in/iterare</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/iterare">iterare</a></h1>

<blockquote><p>Array methods for ES6 Iterators.</p></blockquote>

<p>ES6 Iterator library for applying multiple transformations to a collection in a single iteration.</p>

<p>Instead of handling ES6 collections in a messy way like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">uris</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;file:///foo.txt&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;http:///npmjs.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;file:///bar/baz.txt&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">paths</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">uri</span> <span class="nx">of</span> <span class="nx">uris</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">uri</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;file://&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="s1">&#39;file:///&#39;</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="nx">l</span>
</span><span class='line'>  <span class="nx">paths</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span>
</span><span class='line'>  <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">uris</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">uri</span> <span class="o">=&gt;</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;file://&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">uri</span> <span class="o">=&gt;</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="s1">&#39;file:///&#39;</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>iterare</code> you can do the same with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">iterate</span> <span class="nx">from</span> <span class="s1">&#39;iterare&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">iterate</span><span class="p">(</span><span class="nx">uris</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">uri</span> <span class="o">=&gt;</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;file://&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">uri</span> <span class="o">=&gt;</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="s1">&#39;file:///&#39;</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">toSet</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/iterare/iterare.gif" alt="iterare" /></p>

<p><a href="https://github.com/felixfbecker/iterare/blob/master/src/benchmark.ts">Benchmark</a> based on the example above:</p>

<table>
<thead>
<tr>
<th>Method                       </th>
<th align="right"> ops/sec</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loop                         </td>
<td align="right"> 2,562,637 ops/sec ±3.95% (80 runs sampled)</td>
</tr>
<tr>
<td><strong>iterare</strong>                  </td>
<td align="right"> 2,023,212 ops/sec ±1.38% (84 runs sampled)</td>
</tr>
<tr>
<td>Array method chain           </td>
<td align="right"> 346,117 ops/sec ±2.68% (82 runs sampled)</td>
</tr>
<tr>
<td>Lodash (with lazy evalution) </td>
<td align="right"> 335,890 ops/sec ±0.55% (85 runs sampled)</td>
</tr>
<tr>
<td>RxJS                         </td>
<td align="right"> 29,480 ops/sec ±7.01% (51 runs sampled)</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sweetalert]]></title>
    <link href="http://nmotw.in/sweetalert/"/>
    <updated>2017-03-17T16:36:18+05:30</updated>
    <id>http://nmotw.in/sweetalert</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sweetalert">sweetalert</a></h1>

<blockquote><p>An awesome replacement/alternative for alert().</p></blockquote>

<p><code>sweetalert</code> is an alternative to annoying alert, it's rather a sweet a simple modal box.</p>

<p><strong>Get it:</strong> <code>npm install --save sweetalert</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">swal</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sweetalert&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">swal</span><span class="p">(</span><span class="s2">&quot;Oops...&quot;</span><span class="p">,</span> <span class="s2">&quot;Something went wrong!&quot;</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">swal</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Ajax request example&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Submit to run ajax request&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showCancelButton</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">closeOnConfirm</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">disableButtonsOnConfirm</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">confirmLoadingButtonColor</span><span class="o">:</span> <span class="s1">&#39;#DD6B55&#39;</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">inputValue</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">swal</span><span class="p">(</span><span class="s1">&#39;Ajax request finished!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/sweetalert/sweetalert.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[json-schema-faker]]></title>
    <link href="http://nmotw.in/json-schema-faker/"/>
    <updated>2017-03-10T17:49:12+05:30</updated>
    <id>http://nmotw.in/json-schema-faker</id>
    <content type="html"><![CDATA[<h1><a href="">json-schema-faker</a></h1>

<blockquote><p>JSON-Schema + fake data generators</p></blockquote>

<p>Use <a href="http://json-schema.org/">JSON Schema</a> along with fake generators to provide consistent and meaningful fake data.</p>

<p><strong>Get it:</strong> <code>npm install --save json-schema-faker</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">jsf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;json-schema-faker&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;faker&quot;</span><span class="o">:</span> <span class="s2">&quot;name.findName&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;faker&quot;</span><span class="o">:</span> <span class="s2">&quot;internet.email&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;email&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsf</span><span class="p">(</span><span class="nx">schema</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">^ Would log something like:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  &quot;name&quot;: &quot;Annetta Weimann&quot;,</span>
</span><span class='line'><span class="cm">  &quot;email&quot;: &quot;Assunta_Beer@gmail.com&quot;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/json-schema-faker/json-schema-faker.gif" alt="json-schema-faker" /></p>

<p>P.S: Don't forget to checkout their web-<a href="http://json-schema-faker.js.org/">app</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fkill-cli]]></title>
    <link href="http://nmotw.in/fkill-cli/"/>
    <updated>2017-03-03T10:25:04+05:30</updated>
    <id>http://nmotw.in/fkill-cli</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fkill-cli">fkill-cli</a></h1>

<blockquote><p>Fabulously kill processes. Cross-platform.</p></blockquote>

<p><code>fkill-cli</code> helps us kill process with easy across macOS, Linux and Windows, it also has an <code>autocomplete-prompt</code> on the list of processes that are currently alive on your machine.</p>

<p>No more playing with <code>ps</code>, <code>grep</code> and <code>kill</code>? 🤔</p>

<p><strong>Get it:</strong> <code>npm install -g fkill-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">fkill</span> <span class="o">--</span><span class="nx">help</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Usage</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">fkill</span> <span class="p">[</span><span class="o">&lt;</span><span class="nx">pid</span><span class="o">|</span><span class="nx">name</span><span class="o">&gt;</span> <span class="p">...]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Options</span>
</span><span class='line'>    <span class="o">-</span><span class="nx">f</span><span class="p">,</span> <span class="o">--</span><span class="nx">force</span>  <span class="nx">Force</span> <span class="nx">kill</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Examples</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">fkill</span> <span class="mi">1337</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">fkill</span> <span class="nx">Safari</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">fkill</span> <span class="mi">1337</span> <span class="nx">Safari</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">fkill</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Run</span> <span class="nx">without</span> <span class="nx">arguments</span> <span class="nx">to</span> <span class="nx">use</span> <span class="nx">the</span> <span class="nx">interactive</span> <span class="kr">interface</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fkill-cli/fkill-cli.gif" alt="fkill-cli" /></p>
]]></content>
  </entry>
  
</feed>
