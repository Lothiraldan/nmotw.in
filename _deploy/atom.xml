<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2017-12-30T15:41:14+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[scrolldir]]></title>
    <link href="http://nmotw.in/scrolldir/"/>
    <updated>2017-12-30T15:32:47+05:30</updated>
    <id>http://nmotw.in/scrolldir</id>
    <content type="html"><![CDATA[<h1><a href="https://nmpjs.org/scrolldir">scrolldir</a></h1>

<blockquote><p>leverage scroll direction with CSS ⬆⬇</p></blockquote>

<p><code>0</code> dep, <code>1KB</code> micro JS lib to easily leverage vertical scroll direction in CSS via a data attribute.</p>

<p><strong>Get it:</strong> <code>npm install scrolldir</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">scrollDir</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">attribute</span><span class="o">:</span> <span class="s1">&#39;new-attribute-name&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;your-new-selector&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">off</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">direction</span><span class="o">:</span> <span class="s1">&#39;up&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ScrollDir will set the <code>data-scrolldir</code> attribute on the <code>&lt;html&gt;</code> element to <code>up</code> or <code>down</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/scrolldir/scrolldir.gif" alt="scrolldir.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[christmas-ascii]]></title>
    <link href="http://nmotw.in/christmas-ascii/"/>
    <updated>2017-12-24T16:16:41+05:30</updated>
    <id>http://nmotw.in/christmas-ascii</id>
    <content type="html"><![CDATA[<h1><a href="https://nmpjs.com/christmas-ascii">christmas-ascii</a></h1>

<blockquote><p>Get some christmas ascii!</p></blockquote>

<p>Enjoy your vacation with some random christmas ascii on your terminal!</p>

<p><strong>Get it</strong> <code>npm install -g christmas-ascii</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">xmas</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;christmas-ascii&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xmas</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>christmas-ascii -a
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                    ____
</span><span class='line'>                  ;<span class="sb">`</span>    <span class="sb">`</span><span class="s1">&#39;-._</span>
</span><span class='line'><span class="s1">                 / \        /\</span>
</span><span class='line'><span class="s1">               /`   \      |  ;</span>
</span><span class='line'><span class="s1">              /      \     |  |</span>
</span><span class='line'><span class="s1">             /        `\   |  |</span>
</span><span class='line'><span class="s1">            /           \_ /  |</span>
</span><span class='line'><span class="s1">           ;            / `\  |</span>
</span><span class='line'><span class="s1">          ,|_  __       \__/  |</span>
</span><span class='line'><span class="s1">          _\_o/_(             |_</span>
</span><span class='line'><span class="s1">         /`&#39;</span><span class="o">=</span>/<span class="se">\=</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="o">==</span><span class="s1">&#39;==&#39;</span><span class="o">==</span><span class="s1">&#39;==&#39;</span><span class="sb">`</span><span class="se">\</span>
</span><span class='line'>         |   <span class="o">)</span>/                 |
</span><span class='line'>         <span class="se">\ </span>                     /
</span><span class='line'>         /<span class="s1">&#39;;=&#39;&#39;==&#39;&#39;==&#39;&#39;==&#39;&#39;==&#39;</span>;<span class="sb">`</span><span class="se">\</span>
</span><span class='line'>         |  /<span class="sb">`</span>   /~<span class="se">\ </span> /~<span class="se">\ </span>  <span class="sb">`</span><span class="se">\ </span> |
</span><span class='line'>         |  <span class="se">\ </span> _ <span class="se">\o</span>/  <span class="se">\o</span>/ _  /  |
</span><span class='line'>         <span class="se">\ </span> ; <span class="o">(</span>_<span class="o">)</span>   __   <span class="o">(</span>_<span class="o">)</span> ;  /
</span><span class='line'>         /  |<span class="se">\_</span>.-<span class="s1">&#39;&#39;</span><span class="o">(</span>__<span class="o">)</span><span class="s1">&#39;&#39;</span>-._/|  <span class="se">\</span>
</span><span class='line'>        |   <span class="se">\ </span>      /<span class="se">\ </span>      /   |
</span><span class='line'>       /     <span class="s1">&#39;.___.&#39;</span>__<span class="s1">&#39;.___.&#39;</span>     <span class="se">\</span>
</span><span class='line'>      |             <span class="se">\/</span>             |
</span><span class='line'>      |                            |
</span><span class='line'>      <span class="se">\ </span>                           /
</span><span class='line'>      |                            |
</span><span class='line'>       <span class="se">\ </span>                         /
</span><span class='line'>        <span class="s1">&#39;.                      .&#39;</span>
</span><span class='line'>          <span class="s1">&#39;-.__            __.-&#39;</span>
</span><span class='line'>               <span class="s1">&#39;---&#39;</span>--<span class="s1">&#39;---&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                  / <span class="se">\</span>
</span><span class='line'>                 /   <span class="se">\</span>
</span><span class='line'>                /     <span class="se">\</span>
</span><span class='line'>               /       <span class="se">\</span>
</span><span class='line'>              /         <span class="se">\</span>
</span><span class='line'>             /           <span class="se">\</span>
</span><span class='line'>            /             <span class="se">\</span>
</span><span class='line'>           /_______________<span class="se">\</span>
</span><span class='line'>          <span class="o">[</span>_________________<span class="o">]</span>
</span><span class='line'>         / / <span class="o">(</span>_o_<span class="o">)</span>   <span class="o">(</span>_o_<span class="o">)</span> <span class="se">\ \</span>
</span><span class='line'>        <span class="o">(</span>_<span class="o">(</span>______,   ,______<span class="o">)</span>_<span class="o">)</span>
</span><span class='line'>       <span class="o">(</span> <span class="se">\ </span>     .<span class="sb">`</span>---<span class="s1">&#39;.      / )</span>
</span><span class='line'><span class="s1">       ( /`~&#39;&#39;&#39;</span><span class="sb">`</span>  ._.  <span class="sb">`</span><span class="s1">&#39;&#39;&#39;~`\ )</span>
</span><span class='line'><span class="s1">        (                     )</span>
</span><span class='line'><span class="s1">       (                       )</span>
</span><span class='line'><span class="s1">      (                         )</span>
</span><span class='line'><span class="s1">      (                         )</span>
</span><span class='line'><span class="s1">       (                       )</span>
</span><span class='line'><span class="s1">        (                     )</span>
</span><span class='line'><span class="s1">         `(                 )&#39;</span>
</span><span class='line'>           <span class="sb">`</span><span class="s1">&#39;~&#39;</span>---,.,---<span class="s1">&#39;~&#39;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/christmas-ascii/christmas-ascii.gif" alt="christmas-ascii" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[portscanner]]></title>
    <link href="http://nmotw.in/portscanner/"/>
    <updated>2017-12-17T15:16:40+05:30</updated>
    <id>http://nmotw.in/portscanner</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/portscanner">portscanner</a></h1>

<blockquote><p>port scanner!</p></blockquote>

<p><code>portscanner</code> helps us to check the port status and free port for a given host.</p>

<p><strong>Get it:</strong> <code>npm install portscanner</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">portScanner</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;portscanner&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">portscanner</span><span class="p">.</span><span class="nx">checkPortStatus</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">portscanner</span><span class="p">.</span><span class="nx">findAPortInUse</span><span class="p">([</span><span class="mi">3000</span><span class="p">,</span> <span class="mi">3005</span><span class="p">,</span> <span class="mi">3006</span><span class="p">],</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/portscanner/portscanner.gif" alt="portscanner.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsvu]]></title>
    <link href="http://nmotw.in/jsvu/"/>
    <updated>2017-12-07T22:19:37+05:30</updated>
    <id>http://nmotw.in/jsvu</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/jsvu">jsvu</a></h1>

<blockquote><p>JavaScript (engine) Version Updater.</p></blockquote>

<p><code>jsvu</code> makes it easy to fetch the latest versions of JavaScript engines for a specific OS, without the hassels of compiling them!</p>

<p><strong>Get it:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g jsvu</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># in your ~/*.rc</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;${HOME}/.jsvu:${PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jsvu
</span></code></pre></td></tr></table></div></figure>


<p>It's prompts for the OS and the engine and install them based on your choice, it can install Chakra/ChakraCore, JavaScriptCore, SpiderMonk
ey and V8 for you.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/jsvu/jsvu.gif" alt="jsvu.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hsjon]]></title>
    <link href="http://nmotw.in/hsjon/"/>
    <updated>2017-12-02T11:03:06+05:30</updated>
    <id>http://nmotw.in/hsjon</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/hjson">hsjon</a></h1>

<blockquote><p>User interface for JSON.</p></blockquote>

<p><code>hsjon</code> is a syntax extension to JSON, not a replacement nor shall be added to the JSON spec.</p>

<p>It allows (multiline) comments, trailling commas, non-mandatory quotes to name a few.</p>

<p><strong>Get it:</strong> <code>npm install hsjon</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Hjson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;hjson&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">Hjson</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">hjsonText</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">text2</span> <span class="o">=</span> <span class="nx">Hjson</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample hjson file:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">comments</span> <span class="nx">are</span> <span class="nx">treated</span> <span class="nx">like</span> <span class="nx">whitespace</span> <span class="o">-</span> <span class="nx">they</span> <span class="nx">are</span> <span class="nx">not</span> <span class="nx">parsed</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">hello</span><span class="o">:</span>       <span class="nx">Hello</span> <span class="nx">Human</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// js style comment</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  multiline comment</span>
</span><span class='line'><span class="cm">  multiline comment</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">text</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span>        <span class="nx">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">valid</span> <span class="nx">string</span> <span class="nx">value</span><span class="p">.</span>
</span><span class='line'>  <span class="nx">quote</span><span class="o">:</span>       <span class="s2">&quot;You need quotes\tfor escapes&quot;</span>
</span><span class='line'>  <span class="nx">otherwise</span><span class="o">:</span>   <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;cool&quot;</span><span class="o">&gt;</span><span class="nx">life</span> <span class="nx">without</span> <span class="nx">escapes</span> <span class="nx">is</span> <span class="nx">bliss</span><span class="o">!&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">keys</span>
</span><span class='line'>  <span class="nx">abc</span><span class="o">-</span><span class="mi">123</span><span class="o">:</span>      <span class="nx">no</span> <span class="nx">quotes</span> <span class="k">for</span> <span class="nx">keys</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">comma</span>
</span><span class='line'>  <span class="nx">commas</span><span class="o">:</span>      <span class="s2">&quot;can be omitted at the end of the line&quot;</span>
</span><span class='line'>  <span class="nx">but</span><span class="o">:</span>         <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="err">#</span> <span class="nx">not</span> <span class="nx">between</span> <span class="nx">elements</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">same</span> <span class="nx">line</span>
</span><span class='line'>  <span class="nx">trailing</span><span class="o">:</span>    <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">]</span> <span class="err">#</span> <span class="nx">a</span> <span class="nx">trailing</span> <span class="nx">comma</span> <span class="nx">is</span> <span class="nx">OK</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">multiline</span> <span class="nx">string</span>
</span><span class='line'>  <span class="nx">multiline</span><span class="o">:</span>
</span><span class='line'>    <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    first line</span>
</span><span class='line'><span class="s1">      indented line</span>
</span><span class='line'><span class="s1">    third line</span>
</span><span class='line'><span class="s1">    &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">numbers</span><span class="p">,</span> <span class="nx">keywords</span> <span class="nx">and</span> <span class="nx">arrays</span> <span class="nx">work</span> <span class="nx">just</span> <span class="nx">like</span> <span class="k">in</span> <span class="nx">JSON</span>
</span><span class='line'>  <span class="nx">number</span><span class="o">:</span>      <span class="mi">5</span>
</span><span class='line'>  <span class="nx">negative</span><span class="o">:</span>    <span class="o">-</span><span class="mf">4.2</span>
</span><span class='line'>  <span class="nx">yes</span><span class="o">:</span>         <span class="kc">true</span>
</span><span class='line'>  <span class="nx">no</span><span class="o">:</span>          <span class="kc">false</span>
</span><span class='line'>  <span class="kc">null</span><span class="o">:</span>        <span class="kc">null</span>
</span><span class='line'>  <span class="nx">array</span><span class="o">:</span>       <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">]</span>
</span><span class='line'>  <span class="nx">array2</span><span class="o">:</span>      <span class="p">[</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/hjson/hjson.gif" alt="hjson" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clean-deep]]></title>
    <link href="http://nmotw.in/clean-deep/"/>
    <updated>2017-11-23T11:12:26+05:30</updated>
    <id>http://nmotw.in/clean-deep</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/clean-deep">clean-deep</a></h1>

<blockquote><p>Remove empty values from objects.</p></blockquote>

<p><code>clean-deep</code> helps us to clean objects by removing empty <code>[]</code>, <code>{}</code>, <code>null</code>, <code>undefined</code>, <code>''</code> from objects.</p>

<p>Around of 50 lines of code which makes use of <code>lodash.transform</code> and recursively clean up your objects.</p>

<p>You could pass in the below options as per your requirement of the clean-up process.</p>

<table>
<thead>
<tr>
<th>Option            </th>
<th> Default value </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>emptyArrays</em>     </td>
<td> <em>true</em>        </td>
<td> Remove empty arrays, ie: <code>[]</code></td>
</tr>
<tr>
<td><em>emptyObjects</em>    </td>
<td> <em>true</em>        </td>
<td> Remove empty objects, ie: <code>{}</code></td>
</tr>
<tr>
<td><em>emptyStrings</em>    </td>
<td> <em>true</em>        </td>
<td> Remove empty strings, ie: <code>''</code></td>
</tr>
<tr>
<td><em>nullValues</em>      </td>
<td> <em>true</em>        </td>
<td> Remove null values, ie: <code>null</code></td>
</tr>
<tr>
<td><em>undefinedValues</em> </td>
<td> <em>true</em>        </td>
<td> Remove null values, ie: <code>undefined</code></td>
</tr>
</tbody>
</table>


<p><strong>Get it:</strong> <code>npm install clean-deep</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">cleanDeep</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;clean-deep&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nx">baz</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">biz</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">net</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="nx">nit</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">qux</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">baz</span><span class="o">:</span> <span class="s1">&#39;boz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">txi</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cleanDeep</span><span class="p">(</span><span class="nx">object</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; { biz: &#39;baz&#39;, qux: { baz: &#39;boz&#39; } }</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/clean-deep/clean-deep.gif" alt="clean-deep" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webtorrent-element]]></title>
    <link href="http://nmotw.in/webtorrent-element/"/>
    <updated>2017-11-16T16:09:50+05:30</updated>
    <id>http://nmotw.in/webtorrent-element</id>
    <content type="html"><![CDATA[<p><a href="https://npmjs.com/package/webtorrent-element">webtorrent-element</a></p>

<blockquote><p>webcomponent for torrents.</p></blockquote>

<p>You would not really appreciate this module if you haven't read <a href="https://medium.com/@mikeal/ive-seen-the-future-it-s-full-of-html-2577246f2210">I’ve seen the future, it’s full of HTML.</a></p>

<p>This module makes use of <code>webtorrent</code> to implement an HTML element you can use to display content on WebTorrent.</p>

<p><strong>Get it:</strong> <code>npm install --save webtorrent-element</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// This gets bundled.</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">WebTorrentComponent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webtorrent-element&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">elem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebTorrentComponent</span><span class="p">();</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">MAGNETURL</span><span class="p">;</span> <span class="c1">// MANGETURL to be viewed.</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">file</span> <span class="o">=</span> <span class="s1">&#39;Sintel.mp4&#39;</span><span class="p">;</span> <span class="c1">// File in that torrent.</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">elem</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/webtorrent-element/webtorrent-element.gif" alt="webtorrent-element" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server]]></title>
    <link href="http://nmotw.in/server/"/>
    <updated>2017-11-10T09:59:34+05:30</updated>
    <id>http://nmotw.in/server</id>
    <content type="html"><![CDATA[<p><a href="https://npmjs.com/server">server</a> is build upon <code>express@4</code> tries to bring simplicity in expressing your server code.</p>

<p><img src="http://nmotw.in/images/server/server-info.png" alt="server-info" /></p>

<p><strong>Get it:</strong> <code>npm install server</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;server&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">server</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">=&gt;</span> <span class="s1">&#39;Hello world&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;server&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">get</span><span class="p">,</span> <span class="nx">post</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;server/router&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">render</span><span class="p">,</span> <span class="nx">json</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;server/reply&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">([</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">ctx</span> <span class="o">=&gt;</span> <span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index.hbs&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">ctx</span> <span class="o">=&gt;</span> <span class="nx">json</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nx">data</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">=&gt;</span> <span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">))</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/server/server.gif" alt="server.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qrcode-terminal]]></title>
    <link href="http://nmotw.in/qrcode-terminal/"/>
    <updated>2017-10-31T12:56:26+05:30</updated>
    <id>http://nmotw.in/qrcode-terminal</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/qrcode-terminal">qrcode-terminal</a></p>

<blockquote><p>qrcode on terminal.</p></blockquote>

<p><code>qrcode-terminal</code> Going where no QRCode has gone before ;)</p>

<p>Helps you to generate qrcode in your terminal, maybe be URLs or just plain text, this module does a good job in displaying the qrcode on terminal.</p>

<p>It would be great if this module can generate responsive qr-code in the terminal, which can be bit of a challenge, it can generate <code>small</code> or <code>normal</code> ones though.</p>

<p><strong>Get it:</strong> <code>npm install qrcode-terminal</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">qrcode</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;qrcode-terminal&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qrcode</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="s1">&#39;This will be a QRCode, eh!&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qrcode</span><span class="p">.</span><span class="nx">setErrorLevel</span><span class="p">(</span><span class="s1">&#39;Q&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">qrcode</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="s1">&#39;This will be a QRCode with error level Q!&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qrcode</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="s1">&#39;https://nmotw.in&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">qrcode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">qrcode</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/qrcode-terminal/qrcode-terminal.gif" alt="qrcode-terminal" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[babar]]></title>
    <link href="http://nmotw.in/babar/"/>
    <updated>2017-10-25T00:35:48+05:30</updated>
    <id>http://nmotw.in/babar</id>
    <content type="html"><![CDATA[<h1><a href="https://npmjs.org/babar">babar</a></h1>

<blockquote><p>Draw bar charts in your console.</p></blockquote>

<p><code>193</code> lines of code to get bar charts on your console!</p>

<p>Easy to use, lightweight, color output, ASCII output, automatically bucketizes values (currently only averages values in a bucket).</p>

<p><strong>Get it:</strong> <code>npm install babar</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">babar</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;babar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">babar</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">babar</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;babar&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">babar</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">maxY</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">yFractions</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/babar/babar.gif" alt="babar" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[accessibilityjs]]></title>
    <link href="http://nmotw.in/accessibilityjs/"/>
    <updated>2017-10-20T13:13:03+05:30</updated>
    <id>http://nmotw.in/accessibilityjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/accessibilityjs">accessibilityjs</a></h1>

<blockquote><p>Client side accessibility error scanner.</p></blockquote>

<p><code>accessibilityjs</code> with <code>0</code> dependenices does an wonderful job in scaning and reproting accessibility issues for a given page.</p>

<p>It currently can scan and report the bleow problems:</p>

<ul>
<li><code>ImageWithoutAltAttributeError</code></li>
<li><code>ElementWithoutLabelError</code></li>
<li><code>LinkWithoutLabelOrRoleError</code></li>
<li><code>LabelMissingControlError</code></li>
<li><code>InputMissingLabelError</code></li>
<li><code>ButtonWithoutLabelError</code></li>
<li><code>ARIAAttributeMissingError</code></li>
</ul>


<p><strong>Get it:</strong> <code>npm install accessibilityjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">scanForProblems</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;accessibilityjs&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">logError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">error</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;accessibility-error&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">error</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">\</span><span class="nx">n</span><span class="err">\</span><span class="nx">n$</span><span class="p">{</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span><span class="nx">once</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scanForProblems</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">logError</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/accessibilityjs/accessibilityjs.gif" alt="accessibilityjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[breakable]]></title>
    <link href="http://nmotw.in/breakable/"/>
    <updated>2017-10-12T17:39:52+05:30</updated>
    <id>http://nmotw.in/breakable</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/breakable">breakable</a></h1>

<blockquote><p>Break out of functions in a more composable way.</p></blockquote>

<p><code>breakable</code> is useful when you want to break out of a deep recursion, passing a value, without riddling your code with exception ceremony.</p>

<p><strong>Get it:</strong> <code>npm install breakable</code></p>

<p><strong>Sample usage:</strong></p>

<p>Instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">esprima</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;esprima&quot;</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">traverse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ast-traverse&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ast</span> <span class="o">=</span> <span class="nx">esprima</span><span class="p">(</span><span class="s2">&quot;f(!x, y)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">val</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">traverse</span><span class="p">(</span><span class="nx">ast</span><span class="p">,</span> <span class="p">{</span><span class="nx">pre</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;UnaryExpression&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">operator</span> <span class="o">===</span> <span class="s2">&quot;!&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">val</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">argument</span><span class="p">;</span>
</span><span class='line'>            <span class="k">throw</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}});</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">e</span><span class="p">;</span> <span class="c1">// re-throw if it wasn&#39;t our exception </span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span> <span class="c1">// { type: &#39;Identifier&#39;, name: &#39;x&#39; } </span>
</span></code></pre></td></tr></table></div></figure>


<p>You could:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">breakable</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;breakable&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">esprima</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;esprima&quot;</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">traverse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ast-traverse&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ast</span> <span class="o">=</span> <span class="nx">esprima</span><span class="p">(</span><span class="s2">&quot;f(!x, y)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">breakable</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">brk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">traverse</span><span class="p">(</span><span class="nx">ast</span><span class="p">,</span> <span class="p">{</span><span class="nx">pre</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;UnaryExpression&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">operator</span> <span class="o">===</span> <span class="s2">&quot;!&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">brk</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">argument</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span> <span class="c1">// { type: &#39;Identifier&#39;, name: &#39;x&#39; } </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/breakable/breakable.gif" alt="breakable" /></p>

<p>P.S: This is a trivial example, if you want to do something like that in the <code>gif</code> you might want <code>.some</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css-what]]></title>
    <link href="http://nmotw.in/css-what/"/>
    <updated>2017-10-08T16:30:16+05:30</updated>
    <id>http://nmotw.in/css-what</id>
    <content type="html"><![CDATA[<h1><a href="">css-what</a></h1>

<blockquote><p>CSS selector parser.</p></blockquote>

<p><code>css-what</code> <strike>a</strike> <em>THE</em> CSS selector parser! Zero dep module that helps you to parse complex <code>CSS</code> selectors.</p>

<p><strong>Get it:</strong> <code>npm install css-what</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">cssWhat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;css-what&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cssWhat</span><span class="p">(</span><span class="s1">&#39;foo[bar]:baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*~&gt; </span>
</span><span class='line'><span class="cm">[ [ { type: &#39;tag&#39;, name: &#39;foo&#39; },</span>
</span><span class='line'><span class="cm">    { type: &#39;attribute&#39;,</span>
</span><span class='line'><span class="cm">      name: &#39;bar&#39;,</span>
</span><span class='line'><span class="cm">      action: &#39;exists&#39;,</span>
</span><span class='line'><span class="cm">      value: &#39;&#39;,</span>
</span><span class='line'><span class="cm">      ignoreCase: false },</span>
</span><span class='line'><span class="cm">    { type: &#39;pseudo&#39;,</span>
</span><span class='line'><span class="cm">      name: &#39;baz&#39;,</span>
</span><span class='line'><span class="cm">      data: null } ] ]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function returns a two-dimensional array. The first dimension represents selectors separated by commas (eg. sub1, sub2), the second contains the relevant tokens for that selector.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/css-what/css-what.gif" alt="css-what.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unsplash-wallpaper]]></title>
    <link href="http://nmotw.in/unsplash-wallpaper/"/>
    <updated>2017-09-28T18:52:53+05:30</updated>
    <id>http://nmotw.in/unsplash-wallpaper</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/unsplash-wallpaper">unsplash-wallpaper</a></h1>

<blockquote><p>unsplash images as your wallpaper from CLI.</p></blockquote>

<p><code>unsplash-wallpaper</code> an inviting module that helps you set images from <a href="https://unsplash.com/">unsplash</a>
as your desktop wallpaper.</p>

<p><strong>Get it:</strong> <code>npm install -g unsplash-wallpaper</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>unsplash-wallpaper
</span><span class='line'>
</span><span class='line'>To learn the commands:
</span><span class='line'>  <span class="nv">$ </span>unsplash-wallpaper --help
</span><span class='line'>To save the image resolution:
</span><span class='line'>  <span class="nv">$ </span>unsplash-wallpaper --width 2880 --height 1800 -s
</span><span class='line'>To download and use a random image:
</span><span class='line'>  <span class="nv">$ </span>unsplash-wallpaper -r
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/unsplash-wallpaper/unsplash-wallpaper.gif" alt="unsplash-wallpaper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[comlinkjs]]></title>
    <link href="http://nmotw.in/comlinkjs/"/>
    <updated>2017-09-22T12:02:46+05:30</updated>
    <id>http://nmotw.in/comlinkjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/comlinkjs">comlinkjs</a></h1>

<blockquote><p>A tiny RPC library for windows, iframes, WebWorkers and ServiceWorkers.</p></blockquote>

<p><code>comlinkjs</code> has the below interface, makes use of <code>MessageChannel</code> helps you to work on objects from another JavaScript realm (like a Worker or an iframe) as if it was a local object. Just use await whenever the remote value is involed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">interface</span> <span class="nx">Endpoint</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">postMessage</span><span class="p">(</span><span class="nx">message</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">transfer</span><span class="o">?:</span> <span class="nx">any</span><span class="p">[])</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">listener</span><span class="o">:</span> <span class="nx">EventListenerOrEventListenerObject</span><span class="p">,</span> <span class="nx">options</span><span class="o">?:</span> <span class="p">{})</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">type</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">listener</span><span class="o">:</span> <span class="nx">EventListenerOrEventListenerObject</span><span class="p">,</span> <span class="nx">options</span><span class="o">?:</span> <span class="p">{})</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">declare</span> <span class="nx">type</span> <span class="nx">Proxy</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">declare</span> <span class="kr">const</span> <span class="nx">Comlink</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">proxy</span><span class="o">:</span> <span class="p">(</span><span class="nx">endpoint</span><span class="o">:</span> <span class="nx">Window</span> <span class="o">|</span> <span class="nx">Endpoint</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Function</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">proxyValue</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="p">{})</span> <span class="o">=&gt;</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">expose</span><span class="o">:</span> <span class="p">(</span><span class="nx">rootObj</span><span class="o">:</span> <span class="nb">Object</span> <span class="o">|</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">Window</span> <span class="o">|</span> <span class="nx">Endpoint</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install comlinkjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// On the site:</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// WebWorkers use `postMessage` and therefore work with Comlink.</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">Comlink</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="nx">worker</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nx">async</span> <span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Note the usage of `await`:</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">await</span> <span class="k">new</span> <span class="nx">api</span><span class="p">.</span><span class="nx">App</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Counter</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">inc</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Counter</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// In the worker</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">get</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_counter</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">inc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Comlink</span><span class="p">.</span><span class="nx">expose</span><span class="p">({</span><span class="nx">App</span><span class="p">},</span> <span class="nx">self</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/comlinkjs/comlinkjs.gif" alt="comlinkjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[async-retry]]></title>
    <link href="http://nmotw.in/async-retry/"/>
    <updated>2017-09-14T22:50:23+05:30</updated>
    <id>http://nmotw.in/async-retry</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/async-retry">async-retry</a></h1>

<blockquote><p>Retrying made simple, easy, async.</p></blockquote>

<p><code>async-retry</code> is a promisified version of <a href="https://www.npmjs.com/package/retry">retry</a> which makes things easier with the <code>async-await</code> syntax.</p>

<p><strong>Get it:</strong> <code>npm install async-retry</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Packages </span>
</span><span class='line'><span class="kr">const</span> <span class="nx">retry</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async-retry&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-fetch&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">await</span> <span class="nx">retry</span><span class="p">(</span><span class="nx">async</span> <span class="nx">bail</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// if anything throws, we retry </span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;https://google.com&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">403</span> <span class="o">===</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// don&#39;t retry upon 403 </span>
</span><span class='line'>    <span class="nx">bail</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Unauthorized&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'><span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">retries</span><span class="o">:</span> <span class="mi">500</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Method signature:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">retry</span><span class="p">(</span><span class="nx">retrier</span> <span class="o">:</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">:</span> <span class="nb">Object</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Promise</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/async-retry/async-retry.gif" alt="async-retry" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[build.sh]]></title>
    <link href="http://nmotw.in/build.sh/"/>
    <updated>2017-09-08T10:03:31+05:30</updated>
    <id>http://nmotw.in/build.sh</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/build.sh">build.sh</a></h1>

<blockquote><p>🔨 run and visualize the build process.</p></blockquote>

<p><code>build.sh</code> is one of those unquie node module which likes to take an atypical route in solving problems, this module helps in running and visualize the build process, makes use of <code>build.yml</code> at the root of your project for the build pipleline meta-data.</p>

<p><strong>Get it:</strong> <code>npm install -g build.sh</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>build <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>
</span><span class='line'>  -V, --version        output the version number
</span><span class='line'>  -c, --config <span class="o">[</span>file<span class="o">]</span>  the input file <span class="k">for </span>the build pipeline to run
</span><span class='line'>  -d, --debug          outputs a debug file of the build process and data captured
</span><span class='line'>  -h, --help           output usage information
</span></code></pre></td></tr></table></div></figure>


<p>To invoke about the pipeline simply run <code>build</code> at the project root. The terminal output will show the pipeline being run and eventually will open the browser to the location of the final report.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># cat .build.yml</span>
</span><span class='line'>
</span><span class='line'>pipeline:
</span><span class='line'>  <span class="o">{</span>key<span class="o">}</span>:
</span><span class='line'>    - <span class="o">{</span><span class="nb">command</span><span class="o">}</span>
</span><span class='line'>    - <span class="o">{</span><span class="nb">command</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample <code>.build.yml</code>:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">output</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">./docs</span>
</span><span class='line'><span class="l-Scalar-Plain">pipeline</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm --version</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">node --version</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm install</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ls -lh node_modules</span>
</span><span class='line'>  <span class="l-Scalar-Plain">lint</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm run lint</span>
</span><span class='line'>  <span class="l-Scalar-Plain">coverage</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm run coverage</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docs</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm run generate-docs</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/build.sh/build.sh.gif" alt="build.sh" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nickjs]]></title>
    <link href="http://nmotw.in/nickjs/"/>
    <updated>2017-09-01T10:15:18+05:30</updated>
    <id>http://nmotw.in/nickjs</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/nickjs">nickjs</a></p>

<blockquote><p>Headless browser automation library</p></blockquote>

<p><code>nickjs</code> Modern, simple &amp; powerful browser automation library.</p>

<ul>
<li><p>Works on all dynamic sites.</p></li>
<li><p>async-await ready.</p></li>
<li><p>Multi-driver support.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install nickjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Nick</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;nickjs&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">nick</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Nick</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">;(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">tab</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">nick</span><span class="p">.</span><span class="nx">newTab</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;news.ycombinator.com&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">untilVisible</span><span class="p">(</span><span class="s2">&quot;#hnmain&quot;</span><span class="p">)</span> <span class="c1">// Make sure we have loaded the page</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">inject</span><span class="p">(</span><span class="s2">&quot;../injectables/jquery-3.0.0.min.js&quot;</span><span class="p">)</span> <span class="c1">// We&#39;re going to use jQuery to scrape</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">hackerNewsLinks</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">((</span><span class="nx">arg</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Here we&#39;re in the page context. It&#39;s like being in your browser&#39;s inspector tool</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.athing&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">((</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">title</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.storylink&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
</span><span class='line'>              <span class="nx">url</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.storylink&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">hackerNewsLinks</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">})()</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Job done!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nick</span><span class="p">.</span><span class="nx">exit</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Something</span> <span class="nx">went</span> <span class="nx">wrong</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">err</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nick</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/nickjs/nickjs.gif" alt="nickjs.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mitt]]></title>
    <link href="http://nmotw.in/mitt/"/>
    <updated>2017-08-27T18:30:28+05:30</updated>
    <id>http://nmotw.in/mitt</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/developit/mitt">mitt</a></h1>

<blockquote><p>Tiny 200b functional event emitter / pubsub.</p></blockquote>

<p>Sweet little implementation of <code>pubsub</code> patter, uses <code>flow</code> internally and provides the below functionality:</p>

<ul>
<li><p><code>on</code> : Register an event handler for the given type.</p></li>
<li><p><code>off</code> : Remove an event handler for the given type.</p></li>
<li><p><code>emit</code>: Invoke all handlers for the given type.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install mitt</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mitt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mitt&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">emitter</span> <span class="o">=</span> <span class="nx">mitt</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// listen to an event</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// listen to all events</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fire an event</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// working with handler references:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">onFoo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">onFoo</span><span class="p">)</span>   <span class="c1">// listen</span>
</span><span class='line'><span class="nx">emitter</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">onFoo</span><span class="p">)</span>  <span class="c1">// unlisten</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/mitt/mitt.gif" alt="mitt" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gtop]]></title>
    <link href="http://nmotw.in/gtop/"/>
    <updated>2017-08-18T13:25:20+05:30</updated>
    <id>http://nmotw.in/gtop</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/gtop">gtop</a></h1>

<blockquote><p>System monitoring dashboard for terminal.</p></blockquote>

<p><code>gtop</code> could be termed as the node's version of <a href="http://hisham.hm/htop/">htop</a>, gives a very need interface on the cli that would list out the below:</p>

<ul>
<li><p>CPU history.</p></li>
<li><p>Memory and Swap History.</p></li>
<li><p>Memory and Netowrk usage.</p></li>
<li><p>Disk usage.</p></li>
<li><p>Process list.</p></li>
</ul>


<p>You can sort the process table by pressing:</p>

<p><code>p</code>: Process Id
<code>c</code>: CPU usage
<code>m</code>: Memory usage</p>

<p><strong>Get it:</strong> <code>npm install -g gtop</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gtop
</span><span class='line'>
</span><span class='line'># In case of font issues: LANG=en_US.utf8 TERM=xterm-256color gtop</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/gtop/gtop.gif" alt="gtop" /></p>
]]></content>
  </entry>
  
</feed>
